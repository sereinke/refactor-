package lab;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.LinkedList;

/**
 * class CarregarLabirinto
 * Responsável pela leitura do labirinto - funciona como uma fábrica
 * @author maricleia.vieira
 * @version 1.0
 */
public class CarregarLabirinto {

	static String[][] tamanhoLabirinto;
	private BufferedReader bufferedReader;
	/**
	 *  Labirinto lerDoDisco()
	 * Responsável pela leitura do arquivo txt.
	 * @author maricleia.vieira
	 * @version 1.0
	 */
	public Labirinto lerDoDisco() {
		
		File file = new File("data/labirinto.txt");

		try {

			FileReader reader = new FileReader(file);
			String linha;
			Labirinto labirinto = Labirinto.getInstance();

			
			
			int linhaAtual = 0;
			
			bufferedReader = new BufferedReader(reader);
			
			while ((linha = bufferedReader.readLine()) != null) {
				
				LinkedList<Posicao> listaElemento = new LinkedList<Posicao>();
				for (int colunaAtual = 0; colunaAtual < linha.trim().length(); colunaAtual++) {
					String caracter = linha.trim().substring(colunaAtual,colunaAtual + 1);
					
					if(caracter.equals("S")){
						labirinto.setRatoLinha(linhaAtual);
						labirinto.setRatoColuna(colunaAtual);
						caracter = ".";
					}
					
					Posicao novo = Posicao.criarPosicao(linhaAtual,colunaAtual,caracter);
					listaElemento.add(novo);
				
					labirinto.setNumeroDeColunas(colunaAtual);
					
				}
				
				labirinto.add(listaElemento);
				linhaAtual++;
				System.out.println("");
				
			}
			// TODO
			labirinto.setNumeroDeLinhas(linhaAtual);
			
			

			return labirinto;
		
		} catch (Exception e) {
			e.printStackTrace();
			
			return null;

		}

	}
}
